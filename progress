{1+⍨(@1)⍵}//+
    { 1+(@1)⍵}
{1-⍨(@1)⍵}//-
    {¯1+(@1)⍵}
{¯1⌽⍵}//>
{ 1⌽⍵}//<
/*for controll flow: code: # symbol, which means halt on reach;intut codetape="code,"#*/
{⎕←⊃⍵⋄⍵}//.   print
{⎕(@1)⍵}//,     read
as abcdef

//[:rotate right to ] if current is 0
//]:rotate left to [ if current is not 0
///[:-- ; ]:++, rotate until 0
{(0,enclose W){asd}30k R 0}code
asd:recursive
asd exit condition: first of A> length of second of A
asd recursion structure:(change A)nabla(change W)
{if no outrun of codetape:{qwe}nabla{do taks of upper 6}}
qwe:if task is atMost 6:++
    else rotate
    if w[s] is 0
    instruction pointer+=currewntIP{⍺+0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)}InstructionTape
    to other direction be done: same but reverse,neg and"-="
    {(0,enclose W){first of A!=tally 2nd of A:{qwe}nabla{abcdef}}30k R 0}
    {(0,⊂ ⍵){(⊃⍺)≠≢2⊃⍺:{qwe}∇{abcdef}}30000⍴ 0}
    {(0,⊂ {'+-<>.,[]'⍳⍵}⍵){(⊃⍺)≠≢2⊃⍺:(((2⊃⍺)[⊃⍺]=0){qwe}⍺)∇(((2⊃⍺)[⊃⍺]){abcdef}⍵)}30000⍴ 0}
    
    asd
        take IP,IT  =>   new correct IP, IT unchanged
            if W1 is less than 7
                increment W1, and pass on W2
            else if 7
                if A
                W1+({0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)}/W)
                , and pass on W2
            else if !A
                W1-({0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)}/W)
    qwe     
        take current task and tape =>mutated tape with one step
        
maybe preprocess IT for numbers


7-5{⍺+0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)}⌽

{
    {
    (⍵[1])≤≢⍵[2]:
        ∇(qwe* ⍵)    ,⍵[2]   ,w[2][w[1]]asd ⍵[3]
    }
    0 ({'+-<>.,[]'⍳⍵}⍵) 30000 ⍴ 0
}

{
    {
    (⍵[1])≤≢⍵[2]:
        ∇
        (((-⍣0=⊃⍵[3])(⍵[1]) {⍺+0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)} (⌽⍣0=⊃⍵[3]) ⍵[2])
        ,⍵[2]   
        ,(⍵[1]⊃⍵[2]){⍵} ⍵[3])
    }
    1 ({'+-<>.,[]'⍳⍵}⍵) (30000 ⍴ 0)
}
'++'


qwertz←{
        {
        (⍵[1])≤≢⍵[2]:
                ∇
                (
                    (  
                    (⊂(-⍣(0=⊃⍵[3]))   ⍵[1] {⍺+0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)} ((⌽⍣(0=⊃⍵[3]))   ⍵[2]))
                    ),(⊂⍵[2]), (⊂(((⊃⍵[2])⌷⍨⍵[1]) {⍵}⍵[3]))
                )
        }
        1,
        (⊂{'+-<>.,[]'⍳⍵}⍵),
        (⊂(0 0 0 0 0 0 0 0))
      }
      {{(⍵[1])≤≢⍵[2]:∇(((⊂(-⍣(0=⊃⍵[3]))   ⍵[1] {⍺+0⍳⍨+\-⌿'[]'∘.=((⍺-1)↓⍵)} ((⌽⍣(0=⊃⍵[3]))   ⍵[2]))),(⊂⍵[2]), (⊂(((⊃⍵[2])⌷⍨⍵[1]) {⍵}⍵[3])))}1(⊂{'+-<>.,[]'⍳⍵}⍵),(⊂(0 0 0 0 0 0 0 0))}
------------------------------------------------------------------------------------------------------------------------------
{   (0,⍨'+-<>.,[]'⍳⍵)  M 30000⍴0    }

M←         {    0≠⊃⍺: (⍺F⍵)  ∇   (⍺G⍵)  }

F:"rotate task"     (from omega only ⊃ is needed)
G:"mutate data"     (from alpha only ⊃ is needed)

inputTranslated to numbers←       {'+-<>.,[]'⍳⍵}
    might be redundant and useless
firstofalpha not 0:             0≠⊃⍺

F:
parendepth to 0: 0⍳⍨+\-⌿'[]'∘.=

 F0←{⍺⌽⍨0⍳⍨+\-⌿7 8∘.=⍺}
  F0:unconditionally do as datafirst=0
 F_new:if rotating left, find 0's index on reverse, and negate the rotation number
 F: if 7 and datahead is not 0 or 8 and datahead is 0:
    F_new
    else
    rot1
 
{(⍵,0){0≠⊃⍺:(⎕←⍺F⍵)∇(⎕←⍺G⍵)}30000⍴0} '+[+qwe-]asd'
      this is basicly done
{⍺⌽⍨0⍳⍨+\-⌿7 8∘.=⍺}<=>{⍺⌽⍨0⍳⍨+\-⌿'[]'∘.=⍺}
F_Branched←{⊃⍵=0    :   ⍺⌽⍨0⍳⍨+\-⌿'[]'∘.=⍺}
F←{(((⊃⍺)='[]')⍳1)=1+×⊃⍵:⍺⌽⍨0⍳⍨+\-⌿'[]'∘.=⍺⋄1⌽⍺}


{⎕←⊃⍵⋄⍵}//.   print
{⎕(@1)⍵}
G←{(-/'><'=⊃⍺)⌽(-/'+-'=⊃⍺)+(@1)⍵}



G←{256|({⎕←⊃⍵ ⋄ ⍵}⍣('.'=⊃⍺))({⎕(@1)⍵}⍣(','=⊃⍺))(-/'><'=⊃⍺)⌽(-/'+-'=⊃⍺)+(@1)⍵}

-----------------------------------------
{(⍵,0){0≠⊃⍺:(⍺F⍵)∇(⍺G⍵)}30000⍴0}
F←{(((⊃⍺)='[]')⍳1)=1+×⊃⍵:⍺⌽⍨0⍳⍨+\-⌿'[]'∘.=⍺⋄1⌽⍺}
G←{256|({⎕←⊃⍵ ⋄ ⍵}⍣('.'=⊃⍺))({⎕(@1)⍵}⍣(','=⊃⍺))(-/'><'=⊃⍺)⌽(-/'+-'=⊃⍺)+(@1)⍵}
